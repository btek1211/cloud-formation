AWSTemplateFormatVersion: '2010-09-09'
Resources:
  ELBv2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: [subnet-7fb16326, subnet-09c2dd40]
      SecurityGroups: [!Ref 'LoadBalancerSG']
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '180'
      Tags:
      - Key: Project
        Value: lara
      - Key: Environment
        Value: !Ref 'Environment'
      - Key: Contact
        Value: scytacki

  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: '5'
      HealthCheckPath: /rancher-loadbalancer-test
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: '2'
      UnhealthyThresholdCount: '2'
      HealthCheckTimeoutSeconds: '2'
      Port: '80'
      Protocol: HTTP
      Tags:
      - Key: Project
        Value: lara
      - Key: Environment
        Value: !Ref 'Environment'
      - Key: Contact
        Value: scytacki
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '300'
      VpcId: vpc-9c9714f9

  ELBListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !FindInMap [SSLCertificateMap, !Ref 'SSLCertificateName', Id]
      DefaultActions:
      - TargetGroupArn: !Ref 'ELBTargetGroup'
        Type: forward
      LoadBalancerArn: !Ref 'ELBv2'
      Port: '443'
      Protocol: HTTPS
  ELBListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref 'ELBTargetGroup'
        Type: forward
      LoadBalancerArn: !Ref 'ELBv2'
      Port: '80'
      Protocol: HTTP

  ELBDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt [ELBv2, DNSName]
        HostedZoneId: !GetAtt [ELBv2, CanonicalHostedZoneID]
      HostedZoneName: concord.org.
      Name: !Ref 'DomainName'
      Type: A

  AutoScaler:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: [us-east-1c]
      Cooldown: '400'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: '120'
      HealthCheckType: EC2
      MaxSize: '6'
      MinSize: '1'
      MetricsCollection:
      - Granularity: 1Minute
      VPCZoneIdentifier: [subnet-7fb16326]
      LaunchConfigurationName: !Ref 'LaunchConfiguration'
      Tags:
      - Key: Contact
        Value: scytacki
        PropagateAtLaunch: true
      - Key: Environment
        Value: !Ref 'Environment'
        PropagateAtLaunch: true
      - Key: Name
        Value: !Ref 'AWS::StackName'
        PropagateAtLaunch: true
      - Key: Project
        Value: lara
        PropagateAtLaunch: true
      TargetGroupARNs: [!Ref 'ELBTargetGroup']
      TerminationPolicies: [Default]
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        PauseTime: PT20M
        SuspendProcesses: [AlarmNotification]
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: 'true'
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-812ec0ec
      InstanceType: c4.large
      KeyName: devops
      EbsOptimized: true
      IamInstanceProfile: lara-rancher-host
      InstanceMonitoring: 'true'
      SecurityGroups: [!Ref 'ApplicationHostsSG']
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 48
      UserData:
        "Fn::Base64":
          !Sub |
            #cloud-config
            rancher:
              services:
                rancher-agent1:
                  image: rancher/agent:v1.0.1
                  command: '${RancherEnvironmentURL}'
                  privileged: true
                  volumes:
                  - /var/run/docker.sock:/var/run/docker.sock
                  - /var/lib/rancher:/var/lib/rancher
                  environment:
                    CATTLE_HOST_LABELS: org.concord.role=application
  ApplicationHostsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'web hosts for lara docker '
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '2376'
        ToPort: '2376'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '4500'
        ToPort: '4500'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '500'
        ToPort: '500'
        CidrIp: 0.0.0.0/0
      VpcId: vpc-9c9714f9
  ManagerHostSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'web hosts for lara docker '
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '2376'
        ToPort: '2376'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '4500'
        ToPort: '4500'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '500'
        ToPort: '500'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '1194'
        ToPort: '1194'
        CidrIp: 0.0.0.0/0
      VpcId: vpc-9c9714f9
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for lara load balancer
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      VpcId: vpc-9c9714f9
  ScalingScaleIn:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: StepScaling
      AdjustmentType: PercentChangeInCapacity
      MinAdjustmentStep: '1'
      StepAdjustments:
      - MetricIntervalLowerBound: -5
        MetricIntervalUpperBound: 0
        ScalingAdjustment: -10
      - MetricIntervalUpperBound: -5
        ScalingAdjustment: -50
      AutoScalingGroupName: !Ref 'AutoScaler'
  ScalingScaleOut:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      EstimatedInstanceWarmup: 900
      StepAdjustments:
      - MetricIntervalLowerBound: 0
        MetricIntervalUpperBound: 20
        ScalingAdjustment: 1
      - MetricIntervalLowerBound: 20
        ScalingAdjustment: 2
      AutoScalingGroupName: !Ref 'AutoScaler'
  AlarmHighCPU:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: 'true'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: '3'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '60'
      Statistic: Average
      Threshold: '30.0'
      AlarmActions: [!Ref 'ScalingScaleOut']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'AutoScaler'
  AlarmLowCPU:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: 'true'
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: '3'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '300'
      Statistic: Average
      Threshold: '10.0'
      AlarmActions: [!Ref 'ScalingScaleIn']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'AutoScaler'
  DBIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'DatabaseSecurityGroupId'
      IpProtocol: tcp
      FromPort: '3306'
      ToPort: '3306'
      SourceSecurityGroupId: !Ref 'ApplicationHostsSG'
  ManagerInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1c
      Tags:
      - Key: Contact
        Value: scytacki
      - Key: Environment
        Value: !Ref 'Environment'
      - Key: Name
        Value: !Join ['', [!Ref 'AWS::StackName', -manager]]
      ImageId: ami-812ec0ec
      InstanceType: t2.micro
      KeyName: devops
      Monitoring: 'true'
      SubnetId: subnet-7fb16326
      SecurityGroupIds: [!Ref 'ManagerHostSG']
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 32
      UserData:
        "Fn::Base64":
          !Sub |
            #cloud-config
            rancher:
              services:
                rancher-agent1:
                  image: rancher/agent:v1.0.1
                  command: '${RancherEnvironmentURL}'
                  privileged: true
                  volumes:
                  - /var/run/docker.sock:/var/run/docker.sock
                  - /var/lib/rancher:/var/lib/rancher
                  environment:
                    CATTLE_HOST_LABELS: org.concord.role=manager
Description: lara stack
Outputs:
  ElasticLoadBalancerURL:
    Value: !Join ['', ['http://', !GetAtt [ELBv2, DNSName]]]
Parameters:
  Environment:
    Type: String
    Default: staging
    AllowedValues: [staging, production]
    Description: Enter staging or production. Default is staging.
  RancherEnvironmentURL:
    Type: String
    Description: The URL to the rancher environment which is used to add new hosts into
      the environment.
  SSLCertificateName:
    Type: String
    AllowedValues: [star.concord.org, star.staging.concord.org]
    Description: Two certificates are registered with AWS choose which one to use for the
      load balancer
  DatabaseSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Select security group of the RDS database. This security group will
      be modified to allow access by the EC2 instances in this stack
  DomainName:
    Type: String
    Description: The DNS name that will be created or updated to point at the load
      balancer
Mappings:
  SSLCertificateMap:
    star.concord.org:
      Id: arn:aws:iam::612297603577:server-certificate/cloudfront/E3JZ7YRBPKHWAC/cc.wildcard.until.2018
    star.staging.concord.org:
      Id: arn:aws:acm:us-east-1:612297603577:certificate/8297f3b1-eb86-4f91-8035-3fbd2c9f5560
