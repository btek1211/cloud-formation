AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EcsAmiId:
    Type: String
    Description: ECS AMI id
  EcsInstanceType:
    Type: String
    Description: ECS EC2 instance type
    Default: t2.micro
  KeyName:
    Type: String
    Description: Name of existing EC2 KeyPair for SSH to servers
    Default: devops
  VpcId:
    Type: String
    Description: VPC Id of existing VPC
    AllowedPattern: "^(?:vpc-[0-9a-f]{8}|)$"
    Default: vpc-9c9714f9
  SubnetIds:
    Type: CommaDelimitedList
    Description: Comma separated list of existing VPC Subnet Ids
    Default: "subnet-7fb16326,subnet-09c2dd40"
  AsgMaxSize:
    Type: Number
    Description: Maxium size of ECS Cluster Auto Scaler
  AsgInitialSize:
    Type: Number
    Description: Initial desired size of ECS Cluster Auto Scaler
  EcsClusterName:
    Type: String
    Description: ECS Cluster Name
  Environment:
    Type: String
    Description: Propigate this as a tag on created AWS resources
  NewRelicLicenceKey:
    Type: String
    Description: Licence key to enable new relic server monitoring

Resources:
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "ECS Allowed Ports - ${EcsClusterName}"
      VpcId: !Ref "VpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Contact
        Value: scytacki
      - Key: Environment
        Value: !Ref 'Environment'

  EcsInstanceLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref "EcsAmiId"
      InstanceType: !Ref "EcsInstanceType"
      AssociatePublicIpAddress: true
      # TODO need to look this up
      IamInstanceProfile: ecsInstanceRole
      KeyName: !Ref "KeyName"
      SecurityGroups: [ !Ref "EcsSecurityGroup" ]
      UserData:
        # NOTE the termination lambda fuction currently parses this UserData looking
        # for the ECS_CLUSTER so the cluster name needs to not be in quotes
        # a better approach in the future would be to pass an ENV var to the lambda
        # function specifying the cluster
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config
          rpm -Uvh https://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm
          yum install -y aws-cfn-bootstrap newrelic-sysmond
          nrsysmond-config --set license_key=${NewRelicLicenceKey}
          service newrelic-sysmond start
          groupadd -r docker
          usermod -a -G docker newrelic
          service docker restart
          service newrelic-sysmond restart
          # notify cloudformation
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EcsInstanceAutoScaleGroup --region ${AWS::Region}

  EcsInstanceAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref "SubnetIds"
      LaunchConfigurationName: !Ref "EcsInstanceLaunchConfig"
      MetricsCollection:
        - Granularity: "1Minute"
      MinSize: "1"
      MaxSize: !Ref "AsgMaxSize"
      DesiredCapacity: !Ref "AsgInitialSize"
      NotificationConfigurations:
      - TopicARN: !Ref "AutoScaleSNSTopic"
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
      - Key: Contact
        Value: scytacki
        PropagateAtLaunch: true
      - Key: Environment
        Value: !Ref "Environment"
        PropagateAtLaunch: true
      - Key: Name
        Value: !Sub "ECS ${EcsClusterName}"
        PropagateAtLaunch: true
      - Key: Description
        Value: !Sub |
          This instance is the part of an Auto Scaling group for an ECS cluster. These
          resources were all created by the Cloud Formation stack ${AWS::StackName}
        PropagateAtLaunch: true
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: "100"
      ResourceSignal:
        Timeout: PT15M
    # A rolling update is needed so the autoscaler uses the termination lifecycle of the
    # instances. That way the lambda function can move the tasks to the new instance.
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinSuccessfulInstancesPercent: "100"
        # this will make it wait on the cfn-signal above before marking the instance
        # as successful
        WaitOnResourceSignals: true
        MinInstancesInService: 1
        PauseTime: PT5M
        SuspendProcesses: [AlarmNotification, ScheduledActions]
      AutoScalingReplacingUpdate:
        WillReplace: false
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: 'true'

  EcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Ref "EcsClusterName"

  # taken from:  https://github.com/awslabs/ecs-cid-sample
  SNSLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [autoscaling.amazonaws.com]
            Action: [ "sts:AssumeRole" ]
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: "/"

  # taken from:  https://github.com/awslabs/ecs-cid-sample
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: "lambda-inline"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - autoscaling:CompleteLifecycleAction
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:DescribeInstances
                - ec2:DescribeInstanceAttribute
                - ec2:DescribeInstanceStatus
                - ec2:DescribeHosts
                - ecs:ListContainerInstances
                - ecs:SubmitContainerStateChange
                - ecs:SubmitTaskStateChange
                - ecs:DescribeContainerInstances
                - ecs:UpdateContainerInstancesState
                - ecs:ListTasks
                - ecs:DescribeTasks
                - sns:Publish
                - sns:ListSubscriptions
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: [ "sts:AssumeRole" ]
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: "/"

  # taken from:  https://github.com/awslabs/ecs-cid-sample
  AutoScaleSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt [AutoScaleLambdaFunction, Arn]
          Protocol: lambda
    DependsOn: AutoScaleLambdaFunction

  # taken from:  https://github.com/awslabs/ecs-cid-sample
  AutoScaleLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: concord-devops
        S3Key: "ecs-autoscale-lamba/index.zip"
      Description: Lambda code for the autoscaling hook triggers invoked when autoscaling events of launching and terminating instance occur
      Handler: "index.lambda_handler"
      Role: !GetAtt [LambdaExecutionRole, Arn]
      Runtime: "python2.7"
      Timeout: "300"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AutoScaleLambdaFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AutoScaleSNSTopic

  AutoScaleTerminateHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref EcsInstanceAutoScaleGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: "900"
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN: !Ref AutoScaleSNSTopic
      RoleARN: !GetAtt [SNSLambdaRole, Arn]
    DependsOn: AutoScaleSNSTopic
